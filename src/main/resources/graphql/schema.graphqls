type Message {
    content:String
    isError:Boolean
}

type Item {
    itemId: ID!
    itemName: String
    itemDescription: String
    itemAvailable: Boolean
}

type OrderItem {
    orderRef: ID!
    item: Item
    quantity: Int
}

type Order {
    orderId : ID!
    orderContent: [OrderItem]
    customerId: ID!
    deliveryAddress: String
    note: String
    status: Int
    paid: Boolean
}

type Customer {
    customerId: ID!
    name: String
    phone: String
    address: String
    note: String
}

input NewItemRequestDTO{
    itemName:String
    itemDescription:String
}

input UpdateItemRequestDTO {
    itemId: ID!
    itemNewName:String
    itemNewDescription:String
}

input NewOrderItemRequestDTO {
    orderId:ID
    itemId:ID
    quantity:Int
}

input NewOrderRequestDTO  {
    customerId:ID
    orderContent: [NewOrderItemRequestDTO]
}

input NewCustomerRequestDTO {
    name:String
    phone:String
    address:String
    note:String
}


type Query {
    listAllItems: [Item]
    getItemById(id:String): Item
    searchItem(searchTerm:String): [Item]
    getCustomerById(id:ID): Customer
    getCustomerByPhone(phone:String): Customer
    getOrderById(id:ID): Order
    listAllOrders: [Order]
}

type Mutation {
    addItem(itemRequest:NewItemRequestDTO): ID
    updateItem(itemRequest:UpdateItemRequestDTO): Message
    changeItemAvailability(itemId:ID!, isAvailable:Boolean): Message
    createOrder(orderRequest:NewOrderRequestDTO): ID
    addItemToOrder(itemToAdd:NewOrderItemRequestDTO!): Message
    createCustomer(customerRequest:NewCustomerRequestDTO): ID
}